using System.Text;
using Microsoft.Extensions.Logging;
using TopModel.Core;
using TopModel.Generator.Core;
using TopModel.Utils;

namespace TopModel.Generator.Sql.Ssdt;

/// <summary>
/// Scripter permettant d'écrire les scripts d'initialisation des valeurs de listes de référence.
/// </summary>
public class SsdtReferenceListGenerator(ILogger<SsdtReferenceListGenerator> logger, IFileWriterProvider writerProvider)
    : ClassGeneratorBase<SqlConfig>(logger, writerProvider)
{
    public override string Name => "SsdtRefListGen";

    protected override bool PersistentOnly => true;

    protected override bool FilterClass(Class classe)
    {
        return classe.IsPersistent && !classe.Abstract && classe.Values.Count > 0;
    }

    protected override string GetFileName(Class classe, string tag)
    {
        return Path.Combine(Config.Ssdt!.InitListScriptFolder!, classe.SqlName + ".insert.sql");
    }

    protected override void HandleClass(string fileName, Class classe, string tag)
    {
        using var writer = this.OpenFileWriter(fileName);

        var tableName = classe.SqlName;

        // Entête du fichier.
        WriteHeader(writer, tableName);

        // Ecrit les inserts.
        WriteInsertLines(writer, classe);

        WriteFooter(writer);
    }

    /// <summary>
    /// Ecrit l'entête du fichier.
    /// </summary>
    /// <param name="writer">Flux.</param>
    /// <param name="tableName">Nom de la table.</param>
    private static void WriteHeader(IFileWriter writer, string tableName)
    {
        writer.WriteLine("-- ===========================================================================================");
        writer.WriteLine("--   Description		:	Insertion des valeurs de la table " + tableName + ".");
        writer.WriteLine("-- ===========================================================================================");
        writer.WriteLine();
    }

    /// <summary>
    /// Retourne la ligne d'insert.
    /// </summary>
    /// <param name="modelClass">Modele de la classe.</param>
    /// <param name="initItem">Item a insérer.</param>
    /// <returns>Requête.</returns>
    private string GetInsertLine(Class modelClass, ClassValue initItem, IEnumerable<Class> availableClasses)
    {
        // Remplissage d'un dictionnaire nom de colonne => valeur.
        var definition = initItem.Value;
        var nameValueDict = new Dictionary<string, string?>();
        foreach (var property in modelClass.Properties)
        {
            if (!property.PrimaryKey || !property.Domain.AutoGeneratedValue)
            {
                definition.TryGetValue(property, out var propValue);
                var value = Config.GetValue(property, availableClasses, propValue);
                nameValueDict[property.SqlName] = value == "null" ? "NULL" : value;
            }
        }

        // Création de la requête.
        var sb = new StringBuilder();
        sb.Append("INSERT INTO " + modelClass.SqlName + "(");
        var isFirst = true;
        foreach (var columnName in nameValueDict.Keys)
        {
            if (!isFirst)
            {
                sb.Append(", ");
            }

            isFirst = false;
            sb.Append(columnName);
        }

        sb.Append(") VALUES(");

        isFirst = true;
        foreach (var value in nameValueDict.Values)
        {
            if (!isFirst)
            {
                sb.Append(", ");
            }

            isFirst = false;
            sb.Append(value);
        }

        sb.Append(");");
        return sb.ToString();
    }

    /// <summary>
    /// Ecrit le pied du fichier.
    /// </summary>
    /// <param name="writer">Flux.</param>
    private void WriteFooter(IFileWriter writer)
    {
        if (Config.TargetDBMS == TargetDBMS.Sqlserver)
        {
            writer.WriteLine("GO");
        }
    }

    /// <summary>
    /// Ecrit les lignes d'insertion pour la liste des valeurs.
    /// </summary>
    /// <param name="writer">Flux.</param>
    /// <param name="item">Liste de références.</param>
    private void WriteInsertLines(IFileWriter writer, Class item)
    {
        foreach (var initItem in item.Values)
        {
            writer.WriteLine(GetInsertLine(item, initItem, Classes));
        }
    }
}