{
  "type": "object",
  "description": "Config pour la génération de C#.",
  "additionalProperties": false,
  "required": [
    "outputDirectory",
    "tags"
  ],
  "properties": {
    "language": {
      "type": "string",
      "description": "Langage du générateur, utilisé pour choisir l'implémentation correspondante des domaines, décorateurs et convertisseurs. Par défaut : 'csharp'."
    },
    "tags": {
      "type": "array",
      "description": "Précise les tags de fichier que le générateur doit lire",
      "items": {
        "type": "string",
        "description": "Catégorie de fichier que le générateur doit lire."
      }
    },
    "variables": {
      "type": "object",
      "description": "Définitions de variables à utiliser dans les différents paramètres du générateur.",
      "patternProperties": {
        ".+": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ]
        }
      }
    },
    "tagVariables": {
      "type": "object",
      "description": "Définitions de variables par tag à utiliser dans les différents paramètres du générateur.",
      "patternProperties": {
        ".*": {
          "type": "object",
          "patternProperties": {
            ".*": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          }
        }
      }
    },
    "disable": {
      "type": "array",
      "description": "Désactive les générateurs demandés",
      "items": {
        "type": "string",
        "enum": [
          "CSharpClassGen",
          "CSharpMapperGen",
          "CSharpDbContextGen",
          "CSharpRefAccessGen",
          "CSharpApiServerGen",
          "CSharpApiClientGen"
        ]
      }
    },
    "outputDirectory": {
      "type": "string",
      "description": "Racine du répertoire de génération."
    },
    "translateReferences": {
      "type": "boolean",
      "description": "Si les libellés des listes de références doivent être traduits.",
      "default": "true"
    },
    "translateProperties": {
      "type": "boolean",
      "description": "Si les libellés des propriétés doivent être traduits.",
      "default": "true"
    },
    "ignoreDefaultValues": {
      "type": "boolean",
      "description": "Désactive la génération des valeurs par défaut des propriétés dans les classes et endpoints générés avec cette configuration."
    },
    "persistentModelPath": {
      "type": "string",
      "description": "Localisation du modèle persisté, relative au répertoire de génération. Par défaut : {app}.{module}.Models."
    },
    "referencesModelPath": {
      "type": "string",
      "description": "Localisation des classes de références, relative au répertoire de génération. Si non renseigné, ces classes seront générées comme les autres (selon si elles sont persistantes ou non)."
    },
    "nonPersistentModelPath": {
      "type": "string",
      "description": "Localisation du modèle non persisté, relative au répertoire de génération. Par défaut : {app}.{module}.Models/Dto."
    },
    "apiRootPath": {
      "type": "string",
      "description": "Localisation du l'API générée (client ou serveur), relative au répertoire de génération. Par défaut : {app}.Web."
    },
    "apiFilePath": {
      "type": "string",
      "description": "Chemin vers lequel sont créés les fichiers d'endpoints générés, relative à la racine de l'API. Par défaut : {module}."
    },
    "apiGeneration": {
      "oneOf": [
        {
          "type": "string",
          "description": "Mode de génération de l'API ('Client' ou 'Server')",
          "enum": [
            "Client",
            "Server"
          ]
        },
        {
          "type": "string",
          "description": "Mode de génération de l'API ('Client' ou 'Server')",
          "pattern": "^\\{[^\\}]+\\}$"
        }
      ]
    },
    "dataFlowsPath": {
      "type": "string",
      "description": "Localisation des flux de données générés."
    },
    "useEFMigrations": {
      "type": "boolean",
      "description": "Utilise les migrations EF pour créer/mettre à jour la base de données. Par défaut : 'true'."
    },
    "dbContextPath": {
      "type": "string",
      "description": "Localisation du DbContext, relative au répertoire de génération."
    },
    "dbContextName": {
      "type": "string",
      "description": "Nom du DbContext. Par défaut : {app}DbContext."
    },
    "referenceAccessorsInterfacePath": {
      "type": "string",
      "description": "Chemin vers lequel générer les interfaces d'accesseurs de référence."
    },
    "referenceAccessorsImplementationPath": {
      "type": "string",
      "description": "Chemin vers lequel générer les implémentation d'accesseurs de référence. Par défaut : {DbContextPath}/Reference."
    },
    "referenceAccessorsName": {
      "type": "string",
      "description": "Nom des accesseurs de référence (préfixé par 'I' pour l'interface, puis 'Db' pour les accesseurs persistés). Par défaut : {module}ReferenceAccessors."
    },
    "noAsyncControllers": {
      "type": "boolean",
      "description": "Génère des contrôleurs d'API synchrones."
    },
    "useLowerCaseSqlNames": {
      "type": "boolean",
      "description": "Utilise des noms de tables et de colonnes en lowercase. Par défaut : 'true'."
    },
    "dbSchema": {
      "type": "string",
      "description": "Le nom du schéma de base de données à cibler (si non renseigné, EF utilise 'dbo')."
    },
    "kinetix": {
      "type": "boolean",
      "description": "Si on génère avec Kinetix."
    },
    "domainNamespace": {
      "type": "string",
      "description": "Namespace de l'enum de domaine pour Kinetix. Par défaut : '{app}.Common'."
    },
    "valueTypes": {
      "type": "array",
      "description": "Types C# que le générateur doit considérer comme étant types valeurs (en plus des plus standard comme 'int', 'bool' ou 'DateTime'), qu'il faudra wrapper dans un `Nullable` (avec un `?`) pour les rendre nullables.",
      "items": {
        "type": "string"
      }
    },
    "nullableEnable": {
      "type": "boolean",
      "description": "Prend en compte l'activation du paramètre `nullable: enable` dans le code généré (pour ajouter des `?` derrière les types références nullables)."
    },
    "requiredNonNullable": {
      "oneOf": [
        {
          "type": "boolean",
          "description": "Génère des types non-nullables pour les propriétés obligatoires."
        },
        {
          "type": "string",
          "description": "Génère des types non-nullables pour les propriétés obligatoires.",
          "pattern": "^\\{[^\\}]+\\}$"
        }
      ]
    },
    "noColumnOnAlias": {
      "type": "boolean",
      "description": "Ne génère pas les attributs de colonnes sur les alias dans les classes non persistées. Par défaut : 'true'."
    },
    "noPersistence": {
      "oneOf": [
        {
          "type": "boolean",
          "description": "Considère tous les classes comme étant non-persistantes (= pas d'attribut SQL)."
        },
        {
          "type": "string",
          "description": "Considère tous les classes comme étant non-persistantes (= pas d'attribut SQL).",
          "pattern": "^\\{[^\\}]+\\}$"
        }
      ]
    },
    "mapperTagsOverrides": {
      "type": "array",
      "description": "Si un mapper contient au moins une classe de ces tags, alors il sera généré avec les tags de cette classe (au lieu du comportement par défaut qui priorise les tags de la classe persistée puis de celle qui définit le mapper).",
      "items": {
        "type": "string"
      }
    },
    "mapperLocationPriority": {
      "type": "string",
      "description": "Détermine le type de classe prioritaire pour déterminer la localisation des mappers générés (`persistent` ou `non-persistent`). Par défaut : 'persistent'",
      "enum": [ "persistent", "non-persistent" ]
    },
    "enumsForStaticReferences": {
      "type": "boolean",
      "description": "Utilise des enums au lieu de strings pour les PKs de listes de référence statiques. Par défaut : 'true'."
    },
    "useEFComments": {
      "type": "boolean",
      "description": "Annote les tables et les colonnes générées par EF avec les commentaires du modèle (nécessite `UseEFMigrations`)."
    },
    "useRecords": {
      "type": [ "string", "boolean" ],
      "description": "Utilise des records (mutables) au lieu de classes pour la génération de classes. Par défaut : 'true'.",
      "enum": [
        true,
        false,
        "dtos-only"
      ]
    },
    "usePrimaryConstructors": {
      "type": "boolean",
      "description": "Utilise les constructeurs principaux pour la génération des classes avec dépendances (clients d'API, accesseurs de références). Par défaut : 'true'."
    }
  }
}